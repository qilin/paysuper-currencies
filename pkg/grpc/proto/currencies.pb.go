// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        (unknown)
// source: pkg/grpc/proto/currencies.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GetRateCurrentCommonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,alpha,len=3"
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	//@inject_tag: validate:"required,alpha,len=3"
	To string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	//@inject_tag: validate:"required,oneof=oxr paysuper centralbank stock cardpay"
	RateType string `protobuf:"bytes,3,opt,name=rate_type,json=rateType,proto3" json:"rate_type,omitempty"`
	//@inject_tag: validate:"omitempty,oneof=CBAU CBPL CBCA CBEU CBRF"
	Source string `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	// @inject_tag: validate:"required,oneof=sell buy" json:"exchange_direction" bson:"exchange_direction"
	ExchangeDirection string `protobuf:"bytes,5,opt,name=exchange_direction,json=exchangeDirection,proto3" json:"exchange_direction,omitempty"`
}

func (x *GetRateCurrentCommonRequest) Reset() {
	*x = GetRateCurrentCommonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_grpc_proto_currencies_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRateCurrentCommonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRateCurrentCommonRequest) ProtoMessage() {}

func (x *GetRateCurrentCommonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_grpc_proto_currencies_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRateCurrentCommonRequest.ProtoReflect.Descriptor instead.
func (*GetRateCurrentCommonRequest) Descriptor() ([]byte, []int) {
	return file_pkg_grpc_proto_currencies_proto_rawDescGZIP(), []int{0}
}

func (x *GetRateCurrentCommonRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *GetRateCurrentCommonRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *GetRateCurrentCommonRequest) GetRateType() string {
	if x != nil {
		return x.RateType
	}
	return ""
}

func (x *GetRateCurrentCommonRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *GetRateCurrentCommonRequest) GetExchangeDirection() string {
	if x != nil {
		return x.ExchangeDirection
	}
	return ""
}

type GetRateByDateCommonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,alpha,len=3"
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	//@inject_tag: validate:"required,alpha,len=3"
	To string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	//@inject_tag: validate:"required,oneof=oxr paysuper centralbank stock cardpay"
	RateType string `protobuf:"bytes,3,opt,name=rate_type,json=rateType,proto3" json:"rate_type,omitempty"`
	//@inject_tag: validate:"omitempty,oneof=CBAU CBPL CBCA CBEU CBRF"
	Source string `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	//@inject_tag: validate:"required"
	Datetime *timestamp.Timestamp `protobuf:"bytes,5,opt,name=datetime,proto3" json:"datetime,omitempty"`
	// @inject_tag: validate:"required,oneof=sell buy" json:"exchange_direction" bson:"exchange_direction"
	ExchangeDirection string `protobuf:"bytes,6,opt,name=exchange_direction,json=exchangeDirection,proto3" json:"exchange_direction,omitempty"`
}

func (x *GetRateByDateCommonRequest) Reset() {
	*x = GetRateByDateCommonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_grpc_proto_currencies_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRateByDateCommonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRateByDateCommonRequest) ProtoMessage() {}

func (x *GetRateByDateCommonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_grpc_proto_currencies_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRateByDateCommonRequest.ProtoReflect.Descriptor instead.
func (*GetRateByDateCommonRequest) Descriptor() ([]byte, []int) {
	return file_pkg_grpc_proto_currencies_proto_rawDescGZIP(), []int{1}
}

func (x *GetRateByDateCommonRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *GetRateByDateCommonRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *GetRateByDateCommonRequest) GetRateType() string {
	if x != nil {
		return x.RateType
	}
	return ""
}

func (x *GetRateByDateCommonRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *GetRateByDateCommonRequest) GetDatetime() *timestamp.Timestamp {
	if x != nil {
		return x.Datetime
	}
	return nil
}

func (x *GetRateByDateCommonRequest) GetExchangeDirection() string {
	if x != nil {
		return x.ExchangeDirection
	}
	return ""
}

type GetRateCurrentForMerchantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,alpha,len=3"
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	//@inject_tag: validate:"required,alpha,len=3"
	To string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	//@inject_tag: validate:"required,oneof=oxr paysuper centralbank stock cardpay"
	RateType string `protobuf:"bytes,3,opt,name=rate_type,json=rateType,proto3" json:"rate_type,omitempty"`
	//@inject_tag: validate:"omitempty,oneof=CBAU CBPL CBCA CBEU CBRF"
	Source string `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	//@inject_tag: validate:"omitempty,hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,5,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	// @inject_tag: validate:"required,oneof=sell buy" json:"exchange_direction" bson:"exchange_direction"
	ExchangeDirection string `protobuf:"bytes,6,opt,name=exchange_direction,json=exchangeDirection,proto3" json:"exchange_direction,omitempty"`
}

func (x *GetRateCurrentForMerchantRequest) Reset() {
	*x = GetRateCurrentForMerchantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_grpc_proto_currencies_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRateCurrentForMerchantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRateCurrentForMerchantRequest) ProtoMessage() {}

func (x *GetRateCurrentForMerchantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_grpc_proto_currencies_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRateCurrentForMerchantRequest.ProtoReflect.Descriptor instead.
func (*GetRateCurrentForMerchantRequest) Descriptor() ([]byte, []int) {
	return file_pkg_grpc_proto_currencies_proto_rawDescGZIP(), []int{2}
}

func (x *GetRateCurrentForMerchantRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *GetRateCurrentForMerchantRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *GetRateCurrentForMerchantRequest) GetRateType() string {
	if x != nil {
		return x.RateType
	}
	return ""
}

func (x *GetRateCurrentForMerchantRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *GetRateCurrentForMerchantRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *GetRateCurrentForMerchantRequest) GetExchangeDirection() string {
	if x != nil {
		return x.ExchangeDirection
	}
	return ""
}

type GetRateByDateForMerchantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,alpha,len=3"
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	//@inject_tag: validate:"required,alpha,len=3"
	To string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	//@inject_tag: validate:"required,oneof=oxr paysuper centralbank stock cardpay"
	RateType string `protobuf:"bytes,3,opt,name=rate_type,json=rateType,proto3" json:"rate_type,omitempty"`
	//@inject_tag: validate:"omitempty,oneof=CBAU CBPL CBCA CBEU CBRF"
	Source string `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	//@inject_tag: validate:"required"
	Datetime *timestamp.Timestamp `protobuf:"bytes,5,opt,name=datetime,proto3" json:"datetime,omitempty"`
	//@inject_tag: validate:"omitempty,hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,6,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	// @inject_tag: validate:"required,oneof=sell buy" json:"exchange_direction" bson:"exchange_direction"
	ExchangeDirection string `protobuf:"bytes,7,opt,name=exchange_direction,json=exchangeDirection,proto3" json:"exchange_direction,omitempty"`
}

func (x *GetRateByDateForMerchantRequest) Reset() {
	*x = GetRateByDateForMerchantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_grpc_proto_currencies_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRateByDateForMerchantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRateByDateForMerchantRequest) ProtoMessage() {}

func (x *GetRateByDateForMerchantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_grpc_proto_currencies_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRateByDateForMerchantRequest.ProtoReflect.Descriptor instead.
func (*GetRateByDateForMerchantRequest) Descriptor() ([]byte, []int) {
	return file_pkg_grpc_proto_currencies_proto_rawDescGZIP(), []int{3}
}

func (x *GetRateByDateForMerchantRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *GetRateByDateForMerchantRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *GetRateByDateForMerchantRequest) GetRateType() string {
	if x != nil {
		return x.RateType
	}
	return ""
}

func (x *GetRateByDateForMerchantRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *GetRateByDateForMerchantRequest) GetDatetime() *timestamp.Timestamp {
	if x != nil {
		return x.Datetime
	}
	return nil
}

func (x *GetRateByDateForMerchantRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *GetRateByDateForMerchantRequest) GetExchangeDirection() string {
	if x != nil {
		return x.ExchangeDirection
	}
	return ""
}

type RateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,hexadecimal,len=24" json:"id" bson:"_id"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	//@inject_tag: validate:"required" json:"created_at" bson:"created_at"
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	//@inject_tag: validate:"required,alpha,len=6" json:"pair" bson:"pair"
	Pair string `protobuf:"bytes,3,opt,name=pair,proto3" json:"pair,omitempty"`
	//@inject_tag: validate:"required,numeric,gt=0" json:"rate" bson:"rate"
	Rate float64 `protobuf:"fixed64,4,opt,name=rate,proto3" json:"rate,omitempty"`
	//@inject_tag: validate:"required,alpha" json:"source" bson:"source"
	Source string `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty"`
	//@inject_tag: validate:"numeric" json:"volume" bson:"volume"
	Volume float64 `protobuf:"fixed64,6,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (x *RateData) Reset() {
	*x = RateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_grpc_proto_currencies_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateData) ProtoMessage() {}

func (x *RateData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_grpc_proto_currencies_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateData.ProtoReflect.Descriptor instead.
func (*RateData) Descriptor() ([]byte, []int) {
	return file_pkg_grpc_proto_currencies_proto_rawDescGZIP(), []int{4}
}

func (x *RateData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RateData) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *RateData) GetPair() string {
	if x != nil {
		return x.Pair
	}
	return ""
}

func (x *RateData) GetRate() float64 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *RateData) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *RateData) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

type CardpayRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required" json:"created_at" bson:"created_at"
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	//@inject_tag: validate:"required,alpha,len=3" json:"from" bson:"from"
	From string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	//@inject_tag: validate:"required,alpha,len=3" json:"to" bson:"to"
	To string `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	//@inject_tag: validate:"required,numeric,gt=0" json:"rate" bson:"rate"
	Rate float64 `protobuf:"fixed64,4,opt,name=rate,proto3" json:"rate,omitempty"`
	//@inject_tag: validate:"required,alpha" json:"source" bson:"source"
	Source string `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty"`
	//@inject_tag: validate:"numeric" json:"volume" bson:"volume"
	Volume float64 `protobuf:"fixed64,6,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (x *CardpayRate) Reset() {
	*x = CardpayRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_grpc_proto_currencies_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardpayRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardpayRate) ProtoMessage() {}

func (x *CardpayRate) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_grpc_proto_currencies_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardpayRate.ProtoReflect.Descriptor instead.
func (*CardpayRate) Descriptor() ([]byte, []int) {
	return file_pkg_grpc_proto_currencies_proto_rawDescGZIP(), []int{5}
}

func (x *CardpayRate) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CardpayRate) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *CardpayRate) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *CardpayRate) GetRate() float64 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *CardpayRate) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *CardpayRate) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

type EmptyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyResponse) Reset() {
	*x = EmptyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_grpc_proto_currencies_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyResponse) ProtoMessage() {}

func (x *EmptyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_grpc_proto_currencies_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyResponse.ProtoReflect.Descriptor instead.
func (*EmptyResponse) Descriptor() ([]byte, []int) {
	return file_pkg_grpc_proto_currencies_proto_rawDescGZIP(), []int{6}
}

type EmptyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyRequest) Reset() {
	*x = EmptyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_grpc_proto_currencies_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyRequest) ProtoMessage() {}

func (x *EmptyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_grpc_proto_currencies_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyRequest.ProtoReflect.Descriptor instead.
func (*EmptyRequest) Descriptor() ([]byte, []int) {
	return file_pkg_grpc_proto_currencies_proto_rawDescGZIP(), []int{7}
}

type CorrectionCorridor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,numeric,gte=0,lte=1"
	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CorrectionCorridor) Reset() {
	*x = CorrectionCorridor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_grpc_proto_currencies_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CorrectionCorridor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorrectionCorridor) ProtoMessage() {}

func (x *CorrectionCorridor) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_grpc_proto_currencies_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorrectionCorridor.ProtoReflect.Descriptor instead.
func (*CorrectionCorridor) Descriptor() ([]byte, []int) {
	return file_pkg_grpc_proto_currencies_proto_rawDescGZIP(), []int{8}
}

func (x *CorrectionCorridor) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type CorrectionRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: validate:"required,hexadecimal,len=24" json:"id" bson:"_id"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	//@inject_tag: validate:"required,oneof=oxr paysuper centralbanks stock cardpay" json:"rate_type" bson:"rate_type"
	RateType string `protobuf:"bytes,2,opt,name=rate_type,json=rateType,proto3" json:"rate_type,omitempty"`
	// @inject_tag: validate:"omitempty,numeric,gte=0,lte=100" json:"common_correction" bson:"common_correction"
	CommonCorrection float64 `protobuf:"fixed64,3,opt,name=common_correction,json=commonCorrection,proto3" json:"common_correction,omitempty"`
	// @inject_tag: validate:"omitempty,dive,keys,alpha,len=6,endkeys,gte=0,lte=100" json:"pair_correction" bson:"pair_correction"
	PairCorrection map[string]float64 `protobuf:"bytes,4,rep,name=pair_correction,json=pairCorrection,proto3" json:"pair_correction,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	// @inject_tag: validate:"required" json:"created_at"  bson:"created_at"
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	//@inject_tag: validate:"omitempty,hexadecimal,len=24" json:"merchant_id" bson:"merchant_id"
	MerchantId string `protobuf:"bytes,6,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	// @inject_tag: validate:"required,oneof=sell buy" json:"exchange_direction" bson:"exchange_direction"
	ExchangeDirection string `protobuf:"bytes,7,opt,name=exchange_direction,json=exchangeDirection,proto3" json:"exchange_direction,omitempty"`
}

func (x *CorrectionRule) Reset() {
	*x = CorrectionRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_grpc_proto_currencies_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CorrectionRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorrectionRule) ProtoMessage() {}

func (x *CorrectionRule) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_grpc_proto_currencies_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorrectionRule.ProtoReflect.Descriptor instead.
func (*CorrectionRule) Descriptor() ([]byte, []int) {
	return file_pkg_grpc_proto_currencies_proto_rawDescGZIP(), []int{9}
}

func (x *CorrectionRule) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CorrectionRule) GetRateType() string {
	if x != nil {
		return x.RateType
	}
	return ""
}

func (x *CorrectionRule) GetCommonCorrection() float64 {
	if x != nil {
		return x.CommonCorrection
	}
	return 0
}

func (x *CorrectionRule) GetPairCorrection() map[string]float64 {
	if x != nil {
		return x.PairCorrection
	}
	return nil
}

func (x *CorrectionRule) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CorrectionRule) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *CorrectionRule) GetExchangeDirection() string {
	if x != nil {
		return x.ExchangeDirection
	}
	return ""
}

type CommonCorrectionRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: validate:"required,hexadecimal,len=24" json:"id" bson:"_id"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	//@inject_tag: validate:"required,oneof=oxr paysuper centralbanks stock cardpay" json:"rate_type" bson:"rate_type"
	RateType string `protobuf:"bytes,2,opt,name=rate_type,json=rateType,proto3" json:"rate_type,omitempty"`
	// @inject_tag: validate:"omitempty,numeric,gte=0,lte=100" json:"common_correction" bson:"common_correction"
	CommonCorrection float64 `protobuf:"fixed64,3,opt,name=common_correction,json=commonCorrection,proto3" json:"common_correction,omitempty"`
	// @inject_tag: validate:"omitempty,dive,keys,alpha,len=6,endkeys,gte=0,lte=100" json:"pair_correction" bson:"pair_correction"
	PairCorrection map[string]float64 `protobuf:"bytes,4,rep,name=pair_correction,json=pairCorrection,proto3" json:"pair_correction,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	// @inject_tag: validate:"required" json:"created_at"  bson:"created_at"
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// @inject_tag: validate:"required,oneof=sell buy" json:"exchange_direction" bson:"exchange_direction"
	ExchangeDirection string `protobuf:"bytes,6,opt,name=exchange_direction,json=exchangeDirection,proto3" json:"exchange_direction,omitempty"`
}

func (x *CommonCorrectionRule) Reset() {
	*x = CommonCorrectionRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_grpc_proto_currencies_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonCorrectionRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonCorrectionRule) ProtoMessage() {}

func (x *CommonCorrectionRule) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_grpc_proto_currencies_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonCorrectionRule.ProtoReflect.Descriptor instead.
func (*CommonCorrectionRule) Descriptor() ([]byte, []int) {
	return file_pkg_grpc_proto_currencies_proto_rawDescGZIP(), []int{10}
}

func (x *CommonCorrectionRule) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CommonCorrectionRule) GetRateType() string {
	if x != nil {
		return x.RateType
	}
	return ""
}

func (x *CommonCorrectionRule) GetCommonCorrection() float64 {
	if x != nil {
		return x.CommonCorrection
	}
	return 0
}

func (x *CommonCorrectionRule) GetPairCorrection() map[string]float64 {
	if x != nil {
		return x.PairCorrection
	}
	return nil
}

func (x *CommonCorrectionRule) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CommonCorrectionRule) GetExchangeDirection() string {
	if x != nil {
		return x.ExchangeDirection
	}
	return ""
}

type CommonCorrectionRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,oneof=oxr paysuper centralbank stock cardpay"
	RateType string `protobuf:"bytes,1,opt,name=rate_type,json=rateType,proto3" json:"rate_type,omitempty"`
	// @inject_tag: validate:"required,oneof=sell buy" json:"exchange_direction" bson:"exchange_direction"
	ExchangeDirection string `protobuf:"bytes,2,opt,name=exchange_direction,json=exchangeDirection,proto3" json:"exchange_direction,omitempty"`
}

func (x *CommonCorrectionRuleRequest) Reset() {
	*x = CommonCorrectionRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_grpc_proto_currencies_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonCorrectionRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonCorrectionRuleRequest) ProtoMessage() {}

func (x *CommonCorrectionRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_grpc_proto_currencies_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonCorrectionRuleRequest.ProtoReflect.Descriptor instead.
func (*CommonCorrectionRuleRequest) Descriptor() ([]byte, []int) {
	return file_pkg_grpc_proto_currencies_proto_rawDescGZIP(), []int{11}
}

func (x *CommonCorrectionRuleRequest) GetRateType() string {
	if x != nil {
		return x.RateType
	}
	return ""
}

func (x *CommonCorrectionRuleRequest) GetExchangeDirection() string {
	if x != nil {
		return x.ExchangeDirection
	}
	return ""
}

type MerchantCorrectionRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,oneof=oxr paysuper centralbank stock cardpay"
	RateType string `protobuf:"bytes,1,opt,name=rate_type,json=rateType,proto3" json:"rate_type,omitempty"`
	//@inject_tag: validate:"omitempty,hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	// @inject_tag: validate:"required,oneof=sell buy" json:"exchange_direction" bson:"exchange_direction"
	ExchangeDirection string `protobuf:"bytes,3,opt,name=exchange_direction,json=exchangeDirection,proto3" json:"exchange_direction,omitempty"`
}

func (x *MerchantCorrectionRuleRequest) Reset() {
	*x = MerchantCorrectionRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_grpc_proto_currencies_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerchantCorrectionRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantCorrectionRuleRequest) ProtoMessage() {}

func (x *MerchantCorrectionRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_grpc_proto_currencies_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantCorrectionRuleRequest.ProtoReflect.Descriptor instead.
func (*MerchantCorrectionRuleRequest) Descriptor() ([]byte, []int) {
	return file_pkg_grpc_proto_currencies_proto_rawDescGZIP(), []int{12}
}

func (x *MerchantCorrectionRuleRequest) GetRateType() string {
	if x != nil {
		return x.RateType
	}
	return ""
}

func (x *MerchantCorrectionRuleRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *MerchantCorrectionRuleRequest) GetExchangeDirection() string {
	if x != nil {
		return x.ExchangeDirection
	}
	return ""
}

type ExchangeCurrencyCurrentCommonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,alpha,len=3"
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	//@inject_tag: validate:"required,alpha,len=3"
	To string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	//@inject_tag: validate:"required,oneof=oxr paysuper centralbanks stock cardpay"
	RateType string `protobuf:"bytes,3,opt,name=rate_type,json=rateType,proto3" json:"rate_type,omitempty"`
	Source   string `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	// @inject_tag: validate:"numeric,gte=0"
	Amount float64 `protobuf:"fixed64,5,opt,name=amount,proto3" json:"amount,omitempty"`
	// @inject_tag: validate:"required,oneof=sell buy" json:"exchange_direction" bson:"exchange_direction"
	ExchangeDirection string `protobuf:"bytes,6,opt,name=exchange_direction,json=exchangeDirection,proto3" json:"exchange_direction,omitempty"`
}

func (x *ExchangeCurrencyCurrentCommonRequest) Reset() {
	*x = ExchangeCurrencyCurrentCommonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_grpc_proto_currencies_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeCurrencyCurrentCommonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeCurrencyCurrentCommonRequest) ProtoMessage() {}

func (x *ExchangeCurrencyCurrentCommonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_grpc_proto_currencies_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeCurrencyCurrentCommonRequest.ProtoReflect.Descriptor instead.
func (*ExchangeCurrencyCurrentCommonRequest) Descriptor() ([]byte, []int) {
	return file_pkg_grpc_proto_currencies_proto_rawDescGZIP(), []int{13}
}

func (x *ExchangeCurrencyCurrentCommonRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *ExchangeCurrencyCurrentCommonRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *ExchangeCurrencyCurrentCommonRequest) GetRateType() string {
	if x != nil {
		return x.RateType
	}
	return ""
}

func (x *ExchangeCurrencyCurrentCommonRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *ExchangeCurrencyCurrentCommonRequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *ExchangeCurrencyCurrentCommonRequest) GetExchangeDirection() string {
	if x != nil {
		return x.ExchangeDirection
	}
	return ""
}

type ExchangeCurrencyCurrentForMerchantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,alpha,len=3"
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	//@inject_tag: validate:"required,alpha,len=3"
	To string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	//@inject_tag: validate:"required,oneof=oxr paysuper centralbanks stock cardpay"
	RateType string `protobuf:"bytes,3,opt,name=rate_type,json=rateType,proto3" json:"rate_type,omitempty"`
	//@inject_tag: validate:"omitempty,oneof=CBAU CBPL CBCA CBEU CBRF"
	Source string `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	// @inject_tag: validate:"numeric,gte=0"
	Amount float64 `protobuf:"fixed64,5,opt,name=amount,proto3" json:"amount,omitempty"`
	//@inject_tag: validate:"omitempty,hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,6,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	// @inject_tag: validate:"required,oneof=sell buy" json:"exchange_direction" bson:"exchange_direction"
	ExchangeDirection string `protobuf:"bytes,7,opt,name=exchange_direction,json=exchangeDirection,proto3" json:"exchange_direction,omitempty"`
}

func (x *ExchangeCurrencyCurrentForMerchantRequest) Reset() {
	*x = ExchangeCurrencyCurrentForMerchantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_grpc_proto_currencies_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeCurrencyCurrentForMerchantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeCurrencyCurrentForMerchantRequest) ProtoMessage() {}

func (x *ExchangeCurrencyCurrentForMerchantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_grpc_proto_currencies_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeCurrencyCurrentForMerchantRequest.ProtoReflect.Descriptor instead.
func (*ExchangeCurrencyCurrentForMerchantRequest) Descriptor() ([]byte, []int) {
	return file_pkg_grpc_proto_currencies_proto_rawDescGZIP(), []int{14}
}

func (x *ExchangeCurrencyCurrentForMerchantRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *ExchangeCurrencyCurrentForMerchantRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *ExchangeCurrencyCurrentForMerchantRequest) GetRateType() string {
	if x != nil {
		return x.RateType
	}
	return ""
}

func (x *ExchangeCurrencyCurrentForMerchantRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *ExchangeCurrencyCurrentForMerchantRequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *ExchangeCurrencyCurrentForMerchantRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *ExchangeCurrencyCurrentForMerchantRequest) GetExchangeDirection() string {
	if x != nil {
		return x.ExchangeDirection
	}
	return ""
}

type ExchangeCurrencyByDateCommonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,alpha,len=3"
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	//@inject_tag: validate:"required,alpha,len=3"
	To string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	//@inject_tag: validate:"required,oneof=oxr paysuper centralbanks stock cardpay"
	RateType string `protobuf:"bytes,3,opt,name=rate_type,json=rateType,proto3" json:"rate_type,omitempty"`
	//@inject_tag: validate:"omitempty,oneof=CBAU CBPL CBCA CBEU CBRF"
	Source string `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty"`
	// @inject_tag: validate:"numeric,gte=0"
	Amount float64 `protobuf:"fixed64,6,opt,name=amount,proto3" json:"amount,omitempty"`
	//@inject_tag: validate:"required"
	Datetime *timestamp.Timestamp `protobuf:"bytes,7,opt,name=datetime,proto3" json:"datetime,omitempty"`
	// @inject_tag: validate:"required,oneof=sell buy" json:"exchange_direction" bson:"exchange_direction"
	ExchangeDirection string `protobuf:"bytes,8,opt,name=exchange_direction,json=exchangeDirection,proto3" json:"exchange_direction,omitempty"`
}

func (x *ExchangeCurrencyByDateCommonRequest) Reset() {
	*x = ExchangeCurrencyByDateCommonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_grpc_proto_currencies_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeCurrencyByDateCommonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeCurrencyByDateCommonRequest) ProtoMessage() {}

func (x *ExchangeCurrencyByDateCommonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_grpc_proto_currencies_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeCurrencyByDateCommonRequest.ProtoReflect.Descriptor instead.
func (*ExchangeCurrencyByDateCommonRequest) Descriptor() ([]byte, []int) {
	return file_pkg_grpc_proto_currencies_proto_rawDescGZIP(), []int{15}
}

func (x *ExchangeCurrencyByDateCommonRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *ExchangeCurrencyByDateCommonRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *ExchangeCurrencyByDateCommonRequest) GetRateType() string {
	if x != nil {
		return x.RateType
	}
	return ""
}

func (x *ExchangeCurrencyByDateCommonRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *ExchangeCurrencyByDateCommonRequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *ExchangeCurrencyByDateCommonRequest) GetDatetime() *timestamp.Timestamp {
	if x != nil {
		return x.Datetime
	}
	return nil
}

func (x *ExchangeCurrencyByDateCommonRequest) GetExchangeDirection() string {
	if x != nil {
		return x.ExchangeDirection
	}
	return ""
}

type ExchangeCurrencyByDateForMerchantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,alpha,len=3"
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	//@inject_tag: validate:"required,alpha,len=3"
	To string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	//@inject_tag: validate:"required,oneof=oxr paysuper centralbanks stock cardpay"
	RateType string `protobuf:"bytes,3,opt,name=rate_type,json=rateType,proto3" json:"rate_type,omitempty"`
	//@inject_tag: validate:"omitempty,oneof=CBAU CBPL CBCA CBEU CBRF"
	Source string `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	// @inject_tag: validate:"numeric,gte=0"
	Amount float64 `protobuf:"fixed64,5,opt,name=amount,proto3" json:"amount,omitempty"`
	//@inject_tag: validate:"omitempty,hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,6,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	//@inject_tag: validate:"required"
	Datetime *timestamp.Timestamp `protobuf:"bytes,7,opt,name=datetime,proto3" json:"datetime,omitempty"`
	// @inject_tag: validate:"required,oneof=sell buy" json:"exchange_direction" bson:"exchange_direction"
	ExchangeDirection string `protobuf:"bytes,9,opt,name=exchange_direction,json=exchangeDirection,proto3" json:"exchange_direction,omitempty"`
}

func (x *ExchangeCurrencyByDateForMerchantRequest) Reset() {
	*x = ExchangeCurrencyByDateForMerchantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_grpc_proto_currencies_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeCurrencyByDateForMerchantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeCurrencyByDateForMerchantRequest) ProtoMessage() {}

func (x *ExchangeCurrencyByDateForMerchantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_grpc_proto_currencies_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeCurrencyByDateForMerchantRequest.ProtoReflect.Descriptor instead.
func (*ExchangeCurrencyByDateForMerchantRequest) Descriptor() ([]byte, []int) {
	return file_pkg_grpc_proto_currencies_proto_rawDescGZIP(), []int{16}
}

func (x *ExchangeCurrencyByDateForMerchantRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *ExchangeCurrencyByDateForMerchantRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *ExchangeCurrencyByDateForMerchantRequest) GetRateType() string {
	if x != nil {
		return x.RateType
	}
	return ""
}

func (x *ExchangeCurrencyByDateForMerchantRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *ExchangeCurrencyByDateForMerchantRequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *ExchangeCurrencyByDateForMerchantRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *ExchangeCurrencyByDateForMerchantRequest) GetDatetime() *timestamp.Timestamp {
	if x != nil {
		return x.Datetime
	}
	return nil
}

func (x *ExchangeCurrencyByDateForMerchantRequest) GetExchangeDirection() string {
	if x != nil {
		return x.ExchangeDirection
	}
	return ""
}

type ExchangeCurrencyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: validate:"numeric,gte=0"
	ExchangedAmount float64 `protobuf:"fixed64,1,opt,name=exchanged_amount,json=exchangedAmount,proto3" json:"exchanged_amount,omitempty"`
	//@inject_tag: validate:"required,numeric,gt=0" json:"rate" bson:"exchange_rate"
	ExchangeRate float64 `protobuf:"fixed64,2,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"`
	// @inject_tag: validate:"omitempty,numeric,gte=-100,lte=100" json:"correction"
	Correction float64 `protobuf:"fixed64,3,opt,name=correction,proto3" json:"correction,omitempty"`
	//@inject_tag: validate:"required,numeric,gt=0" json:"original_rate"
	OriginalRate float64 `protobuf:"fixed64,4,opt,name=original_rate,json=originalRate,proto3" json:"original_rate,omitempty"`
	// @inject_tag: validate:"required,oneof=sell buy" json:"exchange_direction" bson:"exchange_direction"
	ExchangeDirection string `protobuf:"bytes,5,opt,name=exchange_direction,json=exchangeDirection,proto3" json:"exchange_direction,omitempty"`
}

func (x *ExchangeCurrencyResponse) Reset() {
	*x = ExchangeCurrencyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_grpc_proto_currencies_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeCurrencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeCurrencyResponse) ProtoMessage() {}

func (x *ExchangeCurrencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_grpc_proto_currencies_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeCurrencyResponse.ProtoReflect.Descriptor instead.
func (*ExchangeCurrencyResponse) Descriptor() ([]byte, []int) {
	return file_pkg_grpc_proto_currencies_proto_rawDescGZIP(), []int{17}
}

func (x *ExchangeCurrencyResponse) GetExchangedAmount() float64 {
	if x != nil {
		return x.ExchangedAmount
	}
	return 0
}

func (x *ExchangeCurrencyResponse) GetExchangeRate() float64 {
	if x != nil {
		return x.ExchangeRate
	}
	return 0
}

func (x *ExchangeCurrencyResponse) GetCorrection() float64 {
	if x != nil {
		return x.Correction
	}
	return 0
}

func (x *ExchangeCurrencyResponse) GetOriginalRate() float64 {
	if x != nil {
		return x.OriginalRate
	}
	return 0
}

func (x *ExchangeCurrencyResponse) GetExchangeDirection() string {
	if x != nil {
		return x.ExchangeDirection
	}
	return ""
}

type CurrenciesList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Currencies []string `protobuf:"bytes,1,rep,name=currencies,proto3" json:"currencies,omitempty"`
}

func (x *CurrenciesList) Reset() {
	*x = CurrenciesList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_grpc_proto_currencies_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrenciesList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrenciesList) ProtoMessage() {}

func (x *CurrenciesList) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_grpc_proto_currencies_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrenciesList.ProtoReflect.Descriptor instead.
func (*CurrenciesList) Descriptor() ([]byte, []int) {
	return file_pkg_grpc_proto_currencies_proto_rawDescGZIP(), []int{18}
}

func (x *CurrenciesList) GetCurrencies() []string {
	if x != nil {
		return x.Currencies
	}
	return nil
}

type CurrenciesPrecisionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values map[string]int32 `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *CurrenciesPrecisionResponse) Reset() {
	*x = CurrenciesPrecisionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_grpc_proto_currencies_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrenciesPrecisionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrenciesPrecisionResponse) ProtoMessage() {}

func (x *CurrenciesPrecisionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_grpc_proto_currencies_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrenciesPrecisionResponse.ProtoReflect.Descriptor instead.
func (*CurrenciesPrecisionResponse) Descriptor() ([]byte, []int) {
	return file_pkg_grpc_proto_currencies_proto_rawDescGZIP(), []int{19}
}

func (x *CurrenciesPrecisionResponse) GetValues() map[string]int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

var File_pkg_grpc_proto_currencies_proto protoreflect.FileDescriptor

var file_pkg_grpc_proto_currencies_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa5,
	0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x74, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xdc, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x36,
	0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x64, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xcb, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x52, 0x61, 0x74,
	0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e,
	0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x82, 0x02, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x42,
	0x79, 0x44, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x36, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xad, 0x01, 0x0a, 0x08, 0x52, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x69, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x0b, 0x43, 0x61, 0x72,
	0x64, 0x70, 0x61, 0x79, 0x52, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x0f, 0x0a, 0x0d, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x0e, 0x0a, 0x0c,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2a, 0x0a, 0x12,
	0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x72, 0x69, 0x64,
	0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x91, 0x03, 0x0a, 0x0e, 0x43, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x0f, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x43,
	0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e,
	0x70, 0x61, 0x69, 0x72, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x41, 0x0a, 0x13, 0x50, 0x61, 0x69,
	0x72, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfc, 0x02, 0x0a,
	0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x61, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x5d, 0x0a, 0x0f, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x43,
	0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e,
	0x70, 0x61, 0x69, 0x72, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x41, 0x0a, 0x13, 0x50, 0x61, 0x69, 0x72,
	0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x69, 0x0a, 0x1b, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8c, 0x01, 0x0a, 0x1d, 0x4d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x61, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc6, 0x01, 0x0a, 0x24, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x74, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2d, 0x0a, 0x12, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xec,
	0x01, 0x0a, 0x29, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2d,
	0x0a, 0x12, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xfd, 0x01,
	0x0a, 0x23, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2d,
	0x0a, 0x12, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa3, 0x02,
	0x0a, 0x28, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e,
	0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x08,
	0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xde, 0x01, 0x0a, 0x18, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x30, 0x0a, 0x0e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x1b, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x50, 0x72,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0x81,
	0x0e, 0x0a, 0x14, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x61, 0x74, 0x65, 0x73,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12,
	0x27, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00,
	0x12, 0x55, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x42, 0x79, 0x44, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x42, 0x79, 0x44, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x52, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x12, 0x2c, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x46, 0x6f, 0x72, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x14, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x2e,
	0x52, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x52, 0x61, 0x74, 0x65, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x12, 0x2b, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x42, 0x79, 0x44, 0x61, 0x74,
	0x65, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x2e, 0x52, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x1d, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x30, 0x2e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x83, 0x01, 0x0a, 0x22, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x12, 0x35, 0x2e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x1c,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x2f, 0x2e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x21, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65,
	0x46, 0x6f, 0x72, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x12, 0x34, 0x2e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x46,
	0x6f, 0x72, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x27, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x43,
	0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x00, 0x12,
	0x68, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x29, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x4d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x1b, 0x41, 0x64, 0x64,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x20, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x1a, 0x19, 0x2e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x1d, 0x41, 0x64, 0x64, 0x4d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1a, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x75, 0x6c, 0x65, 0x1a, 0x19, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x50, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x18, 0x2e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x18,
	0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x18, 0x2e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x56, 0x61, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x18, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x2e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00,
	0x12, 0x51, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x18, 0x2e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x2e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x50,
	0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x10, 0x5a, 0x0e, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_grpc_proto_currencies_proto_rawDescOnce sync.Once
	file_pkg_grpc_proto_currencies_proto_rawDescData = file_pkg_grpc_proto_currencies_proto_rawDesc
)

func file_pkg_grpc_proto_currencies_proto_rawDescGZIP() []byte {
	file_pkg_grpc_proto_currencies_proto_rawDescOnce.Do(func() {
		file_pkg_grpc_proto_currencies_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_grpc_proto_currencies_proto_rawDescData)
	})
	return file_pkg_grpc_proto_currencies_proto_rawDescData
}

var file_pkg_grpc_proto_currencies_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_pkg_grpc_proto_currencies_proto_goTypes = []interface{}{
	(*GetRateCurrentCommonRequest)(nil),               // 0: currencies.GetRateCurrentCommonRequest
	(*GetRateByDateCommonRequest)(nil),                // 1: currencies.GetRateByDateCommonRequest
	(*GetRateCurrentForMerchantRequest)(nil),          // 2: currencies.GetRateCurrentForMerchantRequest
	(*GetRateByDateForMerchantRequest)(nil),           // 3: currencies.GetRateByDateForMerchantRequest
	(*RateData)(nil),                                  // 4: currencies.RateData
	(*CardpayRate)(nil),                               // 5: currencies.CardpayRate
	(*EmptyResponse)(nil),                             // 6: currencies.EmptyResponse
	(*EmptyRequest)(nil),                              // 7: currencies.EmptyRequest
	(*CorrectionCorridor)(nil),                        // 8: currencies.CorrectionCorridor
	(*CorrectionRule)(nil),                            // 9: currencies.CorrectionRule
	(*CommonCorrectionRule)(nil),                      // 10: currencies.CommonCorrectionRule
	(*CommonCorrectionRuleRequest)(nil),               // 11: currencies.CommonCorrectionRuleRequest
	(*MerchantCorrectionRuleRequest)(nil),             // 12: currencies.MerchantCorrectionRuleRequest
	(*ExchangeCurrencyCurrentCommonRequest)(nil),      // 13: currencies.ExchangeCurrencyCurrentCommonRequest
	(*ExchangeCurrencyCurrentForMerchantRequest)(nil), // 14: currencies.ExchangeCurrencyCurrentForMerchantRequest
	(*ExchangeCurrencyByDateCommonRequest)(nil),       // 15: currencies.ExchangeCurrencyByDateCommonRequest
	(*ExchangeCurrencyByDateForMerchantRequest)(nil),  // 16: currencies.ExchangeCurrencyByDateForMerchantRequest
	(*ExchangeCurrencyResponse)(nil),                  // 17: currencies.ExchangeCurrencyResponse
	(*CurrenciesList)(nil),                            // 18: currencies.CurrenciesList
	(*CurrenciesPrecisionResponse)(nil),               // 19: currencies.CurrenciesPrecisionResponse
	nil,                                               // 20: currencies.CorrectionRule.PairCorrectionEntry
	nil,                                               // 21: currencies.CommonCorrectionRule.PairCorrectionEntry
	nil,                                               // 22: currencies.CurrenciesPrecisionResponse.ValuesEntry
	(*timestamp.Timestamp)(nil),                       // 23: google.protobuf.Timestamp
}
var file_pkg_grpc_proto_currencies_proto_depIdxs = []int32{
	23, // 0: currencies.GetRateByDateCommonRequest.datetime:type_name -> google.protobuf.Timestamp
	23, // 1: currencies.GetRateByDateForMerchantRequest.datetime:type_name -> google.protobuf.Timestamp
	23, // 2: currencies.RateData.created_at:type_name -> google.protobuf.Timestamp
	23, // 3: currencies.CardpayRate.created_at:type_name -> google.protobuf.Timestamp
	20, // 4: currencies.CorrectionRule.pair_correction:type_name -> currencies.CorrectionRule.PairCorrectionEntry
	23, // 5: currencies.CorrectionRule.created_at:type_name -> google.protobuf.Timestamp
	21, // 6: currencies.CommonCorrectionRule.pair_correction:type_name -> currencies.CommonCorrectionRule.PairCorrectionEntry
	23, // 7: currencies.CommonCorrectionRule.created_at:type_name -> google.protobuf.Timestamp
	23, // 8: currencies.ExchangeCurrencyByDateCommonRequest.datetime:type_name -> google.protobuf.Timestamp
	23, // 9: currencies.ExchangeCurrencyByDateForMerchantRequest.datetime:type_name -> google.protobuf.Timestamp
	22, // 10: currencies.CurrenciesPrecisionResponse.values:type_name -> currencies.CurrenciesPrecisionResponse.ValuesEntry
	0,  // 11: currencies.CurrencyRatesService.GetRateCurrentCommon:input_type -> currencies.GetRateCurrentCommonRequest
	1,  // 12: currencies.CurrencyRatesService.GetRateByDateCommon:input_type -> currencies.GetRateByDateCommonRequest
	2,  // 13: currencies.CurrencyRatesService.GetRateCurrentForMerchant:input_type -> currencies.GetRateCurrentForMerchantRequest
	3,  // 14: currencies.CurrencyRatesService.GetRateByDateForMerchant:input_type -> currencies.GetRateByDateForMerchantRequest
	13, // 15: currencies.CurrencyRatesService.ExchangeCurrencyCurrentCommon:input_type -> currencies.ExchangeCurrencyCurrentCommonRequest
	14, // 16: currencies.CurrencyRatesService.ExchangeCurrencyCurrentForMerchant:input_type -> currencies.ExchangeCurrencyCurrentForMerchantRequest
	15, // 17: currencies.CurrencyRatesService.ExchangeCurrencyByDateCommon:input_type -> currencies.ExchangeCurrencyByDateCommonRequest
	16, // 18: currencies.CurrencyRatesService.ExchangeCurrencyByDateForMerchant:input_type -> currencies.ExchangeCurrencyByDateForMerchantRequest
	11, // 19: currencies.CurrencyRatesService.GetCommonRateCorrectionRule:input_type -> currencies.CommonCorrectionRuleRequest
	12, // 20: currencies.CurrencyRatesService.GetMerchantRateCorrectionRule:input_type -> currencies.MerchantCorrectionRuleRequest
	10, // 21: currencies.CurrencyRatesService.AddCommonRateCorrectionRule:input_type -> currencies.CommonCorrectionRule
	9,  // 22: currencies.CurrencyRatesService.AddMerchantRateCorrectionRule:input_type -> currencies.CorrectionRule
	7,  // 23: currencies.CurrencyRatesService.GetSupportedCurrencies:input_type -> currencies.EmptyRequest
	7,  // 24: currencies.CurrencyRatesService.GetSettlementCurrencies:input_type -> currencies.EmptyRequest
	7,  // 25: currencies.CurrencyRatesService.GetPriceCurrencies:input_type -> currencies.EmptyRequest
	7,  // 26: currencies.CurrencyRatesService.GetVatCurrencies:input_type -> currencies.EmptyRequest
	7,  // 27: currencies.CurrencyRatesService.GetAccountingCurrencies:input_type -> currencies.EmptyRequest
	7,  // 28: currencies.CurrencyRatesService.GetCurrenciesPrecision:input_type -> currencies.EmptyRequest
	4,  // 29: currencies.CurrencyRatesService.GetRateCurrentCommon:output_type -> currencies.RateData
	4,  // 30: currencies.CurrencyRatesService.GetRateByDateCommon:output_type -> currencies.RateData
	4,  // 31: currencies.CurrencyRatesService.GetRateCurrentForMerchant:output_type -> currencies.RateData
	4,  // 32: currencies.CurrencyRatesService.GetRateByDateForMerchant:output_type -> currencies.RateData
	17, // 33: currencies.CurrencyRatesService.ExchangeCurrencyCurrentCommon:output_type -> currencies.ExchangeCurrencyResponse
	17, // 34: currencies.CurrencyRatesService.ExchangeCurrencyCurrentForMerchant:output_type -> currencies.ExchangeCurrencyResponse
	17, // 35: currencies.CurrencyRatesService.ExchangeCurrencyByDateCommon:output_type -> currencies.ExchangeCurrencyResponse
	17, // 36: currencies.CurrencyRatesService.ExchangeCurrencyByDateForMerchant:output_type -> currencies.ExchangeCurrencyResponse
	9,  // 37: currencies.CurrencyRatesService.GetCommonRateCorrectionRule:output_type -> currencies.CorrectionRule
	9,  // 38: currencies.CurrencyRatesService.GetMerchantRateCorrectionRule:output_type -> currencies.CorrectionRule
	6,  // 39: currencies.CurrencyRatesService.AddCommonRateCorrectionRule:output_type -> currencies.EmptyResponse
	6,  // 40: currencies.CurrencyRatesService.AddMerchantRateCorrectionRule:output_type -> currencies.EmptyResponse
	18, // 41: currencies.CurrencyRatesService.GetSupportedCurrencies:output_type -> currencies.CurrenciesList
	18, // 42: currencies.CurrencyRatesService.GetSettlementCurrencies:output_type -> currencies.CurrenciesList
	18, // 43: currencies.CurrencyRatesService.GetPriceCurrencies:output_type -> currencies.CurrenciesList
	18, // 44: currencies.CurrencyRatesService.GetVatCurrencies:output_type -> currencies.CurrenciesList
	18, // 45: currencies.CurrencyRatesService.GetAccountingCurrencies:output_type -> currencies.CurrenciesList
	19, // 46: currencies.CurrencyRatesService.GetCurrenciesPrecision:output_type -> currencies.CurrenciesPrecisionResponse
	29, // [29:47] is the sub-list for method output_type
	11, // [11:29] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_pkg_grpc_proto_currencies_proto_init() }
func file_pkg_grpc_proto_currencies_proto_init() {
	if File_pkg_grpc_proto_currencies_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_grpc_proto_currencies_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRateCurrentCommonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_grpc_proto_currencies_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRateByDateCommonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_grpc_proto_currencies_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRateCurrentForMerchantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_grpc_proto_currencies_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRateByDateForMerchantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_grpc_proto_currencies_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_grpc_proto_currencies_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardpayRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_grpc_proto_currencies_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_grpc_proto_currencies_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_grpc_proto_currencies_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CorrectionCorridor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_grpc_proto_currencies_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CorrectionRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_grpc_proto_currencies_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonCorrectionRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_grpc_proto_currencies_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonCorrectionRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_grpc_proto_currencies_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerchantCorrectionRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_grpc_proto_currencies_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeCurrencyCurrentCommonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_grpc_proto_currencies_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeCurrencyCurrentForMerchantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_grpc_proto_currencies_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeCurrencyByDateCommonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_grpc_proto_currencies_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeCurrencyByDateForMerchantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_grpc_proto_currencies_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeCurrencyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_grpc_proto_currencies_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrenciesList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_grpc_proto_currencies_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrenciesPrecisionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_grpc_proto_currencies_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_grpc_proto_currencies_proto_goTypes,
		DependencyIndexes: file_pkg_grpc_proto_currencies_proto_depIdxs,
		MessageInfos:      file_pkg_grpc_proto_currencies_proto_msgTypes,
	}.Build()
	File_pkg_grpc_proto_currencies_proto = out.File
	file_pkg_grpc_proto_currencies_proto_rawDesc = nil
	file_pkg_grpc_proto_currencies_proto_goTypes = nil
	file_pkg_grpc_proto_currencies_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CurrencyRatesServiceClient is the client API for CurrencyRatesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CurrencyRatesServiceClient interface {
	GetRateCurrentCommon(ctx context.Context, in *GetRateCurrentCommonRequest, opts ...grpc.CallOption) (*RateData, error)
	GetRateByDateCommon(ctx context.Context, in *GetRateByDateCommonRequest, opts ...grpc.CallOption) (*RateData, error)
	GetRateCurrentForMerchant(ctx context.Context, in *GetRateCurrentForMerchantRequest, opts ...grpc.CallOption) (*RateData, error)
	GetRateByDateForMerchant(ctx context.Context, in *GetRateByDateForMerchantRequest, opts ...grpc.CallOption) (*RateData, error)
	ExchangeCurrencyCurrentCommon(ctx context.Context, in *ExchangeCurrencyCurrentCommonRequest, opts ...grpc.CallOption) (*ExchangeCurrencyResponse, error)
	ExchangeCurrencyCurrentForMerchant(ctx context.Context, in *ExchangeCurrencyCurrentForMerchantRequest, opts ...grpc.CallOption) (*ExchangeCurrencyResponse, error)
	ExchangeCurrencyByDateCommon(ctx context.Context, in *ExchangeCurrencyByDateCommonRequest, opts ...grpc.CallOption) (*ExchangeCurrencyResponse, error)
	ExchangeCurrencyByDateForMerchant(ctx context.Context, in *ExchangeCurrencyByDateForMerchantRequest, opts ...grpc.CallOption) (*ExchangeCurrencyResponse, error)
	GetCommonRateCorrectionRule(ctx context.Context, in *CommonCorrectionRuleRequest, opts ...grpc.CallOption) (*CorrectionRule, error)
	GetMerchantRateCorrectionRule(ctx context.Context, in *MerchantCorrectionRuleRequest, opts ...grpc.CallOption) (*CorrectionRule, error)
	AddCommonRateCorrectionRule(ctx context.Context, in *CommonCorrectionRule, opts ...grpc.CallOption) (*EmptyResponse, error)
	AddMerchantRateCorrectionRule(ctx context.Context, in *CorrectionRule, opts ...grpc.CallOption) (*EmptyResponse, error)
	GetSupportedCurrencies(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*CurrenciesList, error)
	GetSettlementCurrencies(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*CurrenciesList, error)
	GetPriceCurrencies(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*CurrenciesList, error)
	GetVatCurrencies(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*CurrenciesList, error)
	GetAccountingCurrencies(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*CurrenciesList, error)
	GetCurrenciesPrecision(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*CurrenciesPrecisionResponse, error)
}

type currencyRatesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCurrencyRatesServiceClient(cc grpc.ClientConnInterface) CurrencyRatesServiceClient {
	return &currencyRatesServiceClient{cc}
}

func (c *currencyRatesServiceClient) GetRateCurrentCommon(ctx context.Context, in *GetRateCurrentCommonRequest, opts ...grpc.CallOption) (*RateData, error) {
	out := new(RateData)
	err := c.cc.Invoke(ctx, "/currencies.CurrencyRatesService/GetRateCurrentCommon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyRatesServiceClient) GetRateByDateCommon(ctx context.Context, in *GetRateByDateCommonRequest, opts ...grpc.CallOption) (*RateData, error) {
	out := new(RateData)
	err := c.cc.Invoke(ctx, "/currencies.CurrencyRatesService/GetRateByDateCommon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyRatesServiceClient) GetRateCurrentForMerchant(ctx context.Context, in *GetRateCurrentForMerchantRequest, opts ...grpc.CallOption) (*RateData, error) {
	out := new(RateData)
	err := c.cc.Invoke(ctx, "/currencies.CurrencyRatesService/GetRateCurrentForMerchant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyRatesServiceClient) GetRateByDateForMerchant(ctx context.Context, in *GetRateByDateForMerchantRequest, opts ...grpc.CallOption) (*RateData, error) {
	out := new(RateData)
	err := c.cc.Invoke(ctx, "/currencies.CurrencyRatesService/GetRateByDateForMerchant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyRatesServiceClient) ExchangeCurrencyCurrentCommon(ctx context.Context, in *ExchangeCurrencyCurrentCommonRequest, opts ...grpc.CallOption) (*ExchangeCurrencyResponse, error) {
	out := new(ExchangeCurrencyResponse)
	err := c.cc.Invoke(ctx, "/currencies.CurrencyRatesService/ExchangeCurrencyCurrentCommon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyRatesServiceClient) ExchangeCurrencyCurrentForMerchant(ctx context.Context, in *ExchangeCurrencyCurrentForMerchantRequest, opts ...grpc.CallOption) (*ExchangeCurrencyResponse, error) {
	out := new(ExchangeCurrencyResponse)
	err := c.cc.Invoke(ctx, "/currencies.CurrencyRatesService/ExchangeCurrencyCurrentForMerchant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyRatesServiceClient) ExchangeCurrencyByDateCommon(ctx context.Context, in *ExchangeCurrencyByDateCommonRequest, opts ...grpc.CallOption) (*ExchangeCurrencyResponse, error) {
	out := new(ExchangeCurrencyResponse)
	err := c.cc.Invoke(ctx, "/currencies.CurrencyRatesService/ExchangeCurrencyByDateCommon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyRatesServiceClient) ExchangeCurrencyByDateForMerchant(ctx context.Context, in *ExchangeCurrencyByDateForMerchantRequest, opts ...grpc.CallOption) (*ExchangeCurrencyResponse, error) {
	out := new(ExchangeCurrencyResponse)
	err := c.cc.Invoke(ctx, "/currencies.CurrencyRatesService/ExchangeCurrencyByDateForMerchant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyRatesServiceClient) GetCommonRateCorrectionRule(ctx context.Context, in *CommonCorrectionRuleRequest, opts ...grpc.CallOption) (*CorrectionRule, error) {
	out := new(CorrectionRule)
	err := c.cc.Invoke(ctx, "/currencies.CurrencyRatesService/GetCommonRateCorrectionRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyRatesServiceClient) GetMerchantRateCorrectionRule(ctx context.Context, in *MerchantCorrectionRuleRequest, opts ...grpc.CallOption) (*CorrectionRule, error) {
	out := new(CorrectionRule)
	err := c.cc.Invoke(ctx, "/currencies.CurrencyRatesService/GetMerchantRateCorrectionRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyRatesServiceClient) AddCommonRateCorrectionRule(ctx context.Context, in *CommonCorrectionRule, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/currencies.CurrencyRatesService/AddCommonRateCorrectionRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyRatesServiceClient) AddMerchantRateCorrectionRule(ctx context.Context, in *CorrectionRule, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/currencies.CurrencyRatesService/AddMerchantRateCorrectionRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyRatesServiceClient) GetSupportedCurrencies(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*CurrenciesList, error) {
	out := new(CurrenciesList)
	err := c.cc.Invoke(ctx, "/currencies.CurrencyRatesService/GetSupportedCurrencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyRatesServiceClient) GetSettlementCurrencies(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*CurrenciesList, error) {
	out := new(CurrenciesList)
	err := c.cc.Invoke(ctx, "/currencies.CurrencyRatesService/GetSettlementCurrencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyRatesServiceClient) GetPriceCurrencies(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*CurrenciesList, error) {
	out := new(CurrenciesList)
	err := c.cc.Invoke(ctx, "/currencies.CurrencyRatesService/GetPriceCurrencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyRatesServiceClient) GetVatCurrencies(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*CurrenciesList, error) {
	out := new(CurrenciesList)
	err := c.cc.Invoke(ctx, "/currencies.CurrencyRatesService/GetVatCurrencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyRatesServiceClient) GetAccountingCurrencies(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*CurrenciesList, error) {
	out := new(CurrenciesList)
	err := c.cc.Invoke(ctx, "/currencies.CurrencyRatesService/GetAccountingCurrencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyRatesServiceClient) GetCurrenciesPrecision(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*CurrenciesPrecisionResponse, error) {
	out := new(CurrenciesPrecisionResponse)
	err := c.cc.Invoke(ctx, "/currencies.CurrencyRatesService/GetCurrenciesPrecision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CurrencyRatesServiceServer is the server API for CurrencyRatesService service.
type CurrencyRatesServiceServer interface {
	GetRateCurrentCommon(context.Context, *GetRateCurrentCommonRequest) (*RateData, error)
	GetRateByDateCommon(context.Context, *GetRateByDateCommonRequest) (*RateData, error)
	GetRateCurrentForMerchant(context.Context, *GetRateCurrentForMerchantRequest) (*RateData, error)
	GetRateByDateForMerchant(context.Context, *GetRateByDateForMerchantRequest) (*RateData, error)
	ExchangeCurrencyCurrentCommon(context.Context, *ExchangeCurrencyCurrentCommonRequest) (*ExchangeCurrencyResponse, error)
	ExchangeCurrencyCurrentForMerchant(context.Context, *ExchangeCurrencyCurrentForMerchantRequest) (*ExchangeCurrencyResponse, error)
	ExchangeCurrencyByDateCommon(context.Context, *ExchangeCurrencyByDateCommonRequest) (*ExchangeCurrencyResponse, error)
	ExchangeCurrencyByDateForMerchant(context.Context, *ExchangeCurrencyByDateForMerchantRequest) (*ExchangeCurrencyResponse, error)
	GetCommonRateCorrectionRule(context.Context, *CommonCorrectionRuleRequest) (*CorrectionRule, error)
	GetMerchantRateCorrectionRule(context.Context, *MerchantCorrectionRuleRequest) (*CorrectionRule, error)
	AddCommonRateCorrectionRule(context.Context, *CommonCorrectionRule) (*EmptyResponse, error)
	AddMerchantRateCorrectionRule(context.Context, *CorrectionRule) (*EmptyResponse, error)
	GetSupportedCurrencies(context.Context, *EmptyRequest) (*CurrenciesList, error)
	GetSettlementCurrencies(context.Context, *EmptyRequest) (*CurrenciesList, error)
	GetPriceCurrencies(context.Context, *EmptyRequest) (*CurrenciesList, error)
	GetVatCurrencies(context.Context, *EmptyRequest) (*CurrenciesList, error)
	GetAccountingCurrencies(context.Context, *EmptyRequest) (*CurrenciesList, error)
	GetCurrenciesPrecision(context.Context, *EmptyRequest) (*CurrenciesPrecisionResponse, error)
}

// UnimplementedCurrencyRatesServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCurrencyRatesServiceServer struct {
}

func (*UnimplementedCurrencyRatesServiceServer) GetRateCurrentCommon(context.Context, *GetRateCurrentCommonRequest) (*RateData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRateCurrentCommon not implemented")
}
func (*UnimplementedCurrencyRatesServiceServer) GetRateByDateCommon(context.Context, *GetRateByDateCommonRequest) (*RateData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRateByDateCommon not implemented")
}
func (*UnimplementedCurrencyRatesServiceServer) GetRateCurrentForMerchant(context.Context, *GetRateCurrentForMerchantRequest) (*RateData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRateCurrentForMerchant not implemented")
}
func (*UnimplementedCurrencyRatesServiceServer) GetRateByDateForMerchant(context.Context, *GetRateByDateForMerchantRequest) (*RateData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRateByDateForMerchant not implemented")
}
func (*UnimplementedCurrencyRatesServiceServer) ExchangeCurrencyCurrentCommon(context.Context, *ExchangeCurrencyCurrentCommonRequest) (*ExchangeCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeCurrencyCurrentCommon not implemented")
}
func (*UnimplementedCurrencyRatesServiceServer) ExchangeCurrencyCurrentForMerchant(context.Context, *ExchangeCurrencyCurrentForMerchantRequest) (*ExchangeCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeCurrencyCurrentForMerchant not implemented")
}
func (*UnimplementedCurrencyRatesServiceServer) ExchangeCurrencyByDateCommon(context.Context, *ExchangeCurrencyByDateCommonRequest) (*ExchangeCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeCurrencyByDateCommon not implemented")
}
func (*UnimplementedCurrencyRatesServiceServer) ExchangeCurrencyByDateForMerchant(context.Context, *ExchangeCurrencyByDateForMerchantRequest) (*ExchangeCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeCurrencyByDateForMerchant not implemented")
}
func (*UnimplementedCurrencyRatesServiceServer) GetCommonRateCorrectionRule(context.Context, *CommonCorrectionRuleRequest) (*CorrectionRule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommonRateCorrectionRule not implemented")
}
func (*UnimplementedCurrencyRatesServiceServer) GetMerchantRateCorrectionRule(context.Context, *MerchantCorrectionRuleRequest) (*CorrectionRule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerchantRateCorrectionRule not implemented")
}
func (*UnimplementedCurrencyRatesServiceServer) AddCommonRateCorrectionRule(context.Context, *CommonCorrectionRule) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCommonRateCorrectionRule not implemented")
}
func (*UnimplementedCurrencyRatesServiceServer) AddMerchantRateCorrectionRule(context.Context, *CorrectionRule) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMerchantRateCorrectionRule not implemented")
}
func (*UnimplementedCurrencyRatesServiceServer) GetSupportedCurrencies(context.Context, *EmptyRequest) (*CurrenciesList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupportedCurrencies not implemented")
}
func (*UnimplementedCurrencyRatesServiceServer) GetSettlementCurrencies(context.Context, *EmptyRequest) (*CurrenciesList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettlementCurrencies not implemented")
}
func (*UnimplementedCurrencyRatesServiceServer) GetPriceCurrencies(context.Context, *EmptyRequest) (*CurrenciesList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPriceCurrencies not implemented")
}
func (*UnimplementedCurrencyRatesServiceServer) GetVatCurrencies(context.Context, *EmptyRequest) (*CurrenciesList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVatCurrencies not implemented")
}
func (*UnimplementedCurrencyRatesServiceServer) GetAccountingCurrencies(context.Context, *EmptyRequest) (*CurrenciesList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountingCurrencies not implemented")
}
func (*UnimplementedCurrencyRatesServiceServer) GetCurrenciesPrecision(context.Context, *EmptyRequest) (*CurrenciesPrecisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrenciesPrecision not implemented")
}

func RegisterCurrencyRatesServiceServer(s *grpc.Server, srv CurrencyRatesServiceServer) {
	s.RegisterService(&_CurrencyRatesService_serviceDesc, srv)
}

func _CurrencyRatesService_GetRateCurrentCommon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRateCurrentCommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyRatesServiceServer).GetRateCurrentCommon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/currencies.CurrencyRatesService/GetRateCurrentCommon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyRatesServiceServer).GetRateCurrentCommon(ctx, req.(*GetRateCurrentCommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyRatesService_GetRateByDateCommon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRateByDateCommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyRatesServiceServer).GetRateByDateCommon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/currencies.CurrencyRatesService/GetRateByDateCommon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyRatesServiceServer).GetRateByDateCommon(ctx, req.(*GetRateByDateCommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyRatesService_GetRateCurrentForMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRateCurrentForMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyRatesServiceServer).GetRateCurrentForMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/currencies.CurrencyRatesService/GetRateCurrentForMerchant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyRatesServiceServer).GetRateCurrentForMerchant(ctx, req.(*GetRateCurrentForMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyRatesService_GetRateByDateForMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRateByDateForMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyRatesServiceServer).GetRateByDateForMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/currencies.CurrencyRatesService/GetRateByDateForMerchant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyRatesServiceServer).GetRateByDateForMerchant(ctx, req.(*GetRateByDateForMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyRatesService_ExchangeCurrencyCurrentCommon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeCurrencyCurrentCommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyRatesServiceServer).ExchangeCurrencyCurrentCommon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/currencies.CurrencyRatesService/ExchangeCurrencyCurrentCommon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyRatesServiceServer).ExchangeCurrencyCurrentCommon(ctx, req.(*ExchangeCurrencyCurrentCommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyRatesService_ExchangeCurrencyCurrentForMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeCurrencyCurrentForMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyRatesServiceServer).ExchangeCurrencyCurrentForMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/currencies.CurrencyRatesService/ExchangeCurrencyCurrentForMerchant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyRatesServiceServer).ExchangeCurrencyCurrentForMerchant(ctx, req.(*ExchangeCurrencyCurrentForMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyRatesService_ExchangeCurrencyByDateCommon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeCurrencyByDateCommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyRatesServiceServer).ExchangeCurrencyByDateCommon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/currencies.CurrencyRatesService/ExchangeCurrencyByDateCommon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyRatesServiceServer).ExchangeCurrencyByDateCommon(ctx, req.(*ExchangeCurrencyByDateCommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyRatesService_ExchangeCurrencyByDateForMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeCurrencyByDateForMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyRatesServiceServer).ExchangeCurrencyByDateForMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/currencies.CurrencyRatesService/ExchangeCurrencyByDateForMerchant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyRatesServiceServer).ExchangeCurrencyByDateForMerchant(ctx, req.(*ExchangeCurrencyByDateForMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyRatesService_GetCommonRateCorrectionRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonCorrectionRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyRatesServiceServer).GetCommonRateCorrectionRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/currencies.CurrencyRatesService/GetCommonRateCorrectionRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyRatesServiceServer).GetCommonRateCorrectionRule(ctx, req.(*CommonCorrectionRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyRatesService_GetMerchantRateCorrectionRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantCorrectionRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyRatesServiceServer).GetMerchantRateCorrectionRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/currencies.CurrencyRatesService/GetMerchantRateCorrectionRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyRatesServiceServer).GetMerchantRateCorrectionRule(ctx, req.(*MerchantCorrectionRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyRatesService_AddCommonRateCorrectionRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonCorrectionRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyRatesServiceServer).AddCommonRateCorrectionRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/currencies.CurrencyRatesService/AddCommonRateCorrectionRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyRatesServiceServer).AddCommonRateCorrectionRule(ctx, req.(*CommonCorrectionRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyRatesService_AddMerchantRateCorrectionRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CorrectionRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyRatesServiceServer).AddMerchantRateCorrectionRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/currencies.CurrencyRatesService/AddMerchantRateCorrectionRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyRatesServiceServer).AddMerchantRateCorrectionRule(ctx, req.(*CorrectionRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyRatesService_GetSupportedCurrencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyRatesServiceServer).GetSupportedCurrencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/currencies.CurrencyRatesService/GetSupportedCurrencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyRatesServiceServer).GetSupportedCurrencies(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyRatesService_GetSettlementCurrencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyRatesServiceServer).GetSettlementCurrencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/currencies.CurrencyRatesService/GetSettlementCurrencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyRatesServiceServer).GetSettlementCurrencies(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyRatesService_GetPriceCurrencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyRatesServiceServer).GetPriceCurrencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/currencies.CurrencyRatesService/GetPriceCurrencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyRatesServiceServer).GetPriceCurrencies(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyRatesService_GetVatCurrencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyRatesServiceServer).GetVatCurrencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/currencies.CurrencyRatesService/GetVatCurrencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyRatesServiceServer).GetVatCurrencies(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyRatesService_GetAccountingCurrencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyRatesServiceServer).GetAccountingCurrencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/currencies.CurrencyRatesService/GetAccountingCurrencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyRatesServiceServer).GetAccountingCurrencies(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyRatesService_GetCurrenciesPrecision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyRatesServiceServer).GetCurrenciesPrecision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/currencies.CurrencyRatesService/GetCurrenciesPrecision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyRatesServiceServer).GetCurrenciesPrecision(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CurrencyRatesService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "currencies.CurrencyRatesService",
	HandlerType: (*CurrencyRatesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRateCurrentCommon",
			Handler:    _CurrencyRatesService_GetRateCurrentCommon_Handler,
		},
		{
			MethodName: "GetRateByDateCommon",
			Handler:    _CurrencyRatesService_GetRateByDateCommon_Handler,
		},
		{
			MethodName: "GetRateCurrentForMerchant",
			Handler:    _CurrencyRatesService_GetRateCurrentForMerchant_Handler,
		},
		{
			MethodName: "GetRateByDateForMerchant",
			Handler:    _CurrencyRatesService_GetRateByDateForMerchant_Handler,
		},
		{
			MethodName: "ExchangeCurrencyCurrentCommon",
			Handler:    _CurrencyRatesService_ExchangeCurrencyCurrentCommon_Handler,
		},
		{
			MethodName: "ExchangeCurrencyCurrentForMerchant",
			Handler:    _CurrencyRatesService_ExchangeCurrencyCurrentForMerchant_Handler,
		},
		{
			MethodName: "ExchangeCurrencyByDateCommon",
			Handler:    _CurrencyRatesService_ExchangeCurrencyByDateCommon_Handler,
		},
		{
			MethodName: "ExchangeCurrencyByDateForMerchant",
			Handler:    _CurrencyRatesService_ExchangeCurrencyByDateForMerchant_Handler,
		},
		{
			MethodName: "GetCommonRateCorrectionRule",
			Handler:    _CurrencyRatesService_GetCommonRateCorrectionRule_Handler,
		},
		{
			MethodName: "GetMerchantRateCorrectionRule",
			Handler:    _CurrencyRatesService_GetMerchantRateCorrectionRule_Handler,
		},
		{
			MethodName: "AddCommonRateCorrectionRule",
			Handler:    _CurrencyRatesService_AddCommonRateCorrectionRule_Handler,
		},
		{
			MethodName: "AddMerchantRateCorrectionRule",
			Handler:    _CurrencyRatesService_AddMerchantRateCorrectionRule_Handler,
		},
		{
			MethodName: "GetSupportedCurrencies",
			Handler:    _CurrencyRatesService_GetSupportedCurrencies_Handler,
		},
		{
			MethodName: "GetSettlementCurrencies",
			Handler:    _CurrencyRatesService_GetSettlementCurrencies_Handler,
		},
		{
			MethodName: "GetPriceCurrencies",
			Handler:    _CurrencyRatesService_GetPriceCurrencies_Handler,
		},
		{
			MethodName: "GetVatCurrencies",
			Handler:    _CurrencyRatesService_GetVatCurrencies_Handler,
		},
		{
			MethodName: "GetAccountingCurrencies",
			Handler:    _CurrencyRatesService_GetAccountingCurrencies_Handler,
		},
		{
			MethodName: "GetCurrenciesPrecision",
			Handler:    _CurrencyRatesService_GetCurrenciesPrecision_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/grpc/proto/currencies.proto",
}
